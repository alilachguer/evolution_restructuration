digraph G { 
	rankdir=BT;
subgraph Collections { 
label="Collections";
1 [shape=record,label="{Concept_Collections_4|int add(java.lang.Object, int)\nint remove(java.lang.Object, int)\nint count(java.lang.Object)\ninterface java.util.Set entrySet()\ninterface java.util.Set elementSet()\nboolean setCount(java.lang.Object, int, int)\nint setCount(java.lang.Object, int)\nboolean add(java.lang.Object)\nboolean remove(java.lang.Object)\nvoid clear()\nboolean contains(java.lang.Object)\nboolean isEmpty()\ninterface java.util.Iterator iterator()\nint size()\nclass [Ljava.lang.Object; toArray([Ljava.lang.Object;)\nclass [Ljava.lang.Object; toArray()\nboolean addAll(java.util.Collection)\nboolean containsAll(java.util.Collection)\nboolean removeAll(java.util.Collection)\nboolean retainAll(java.util.Collection)\ninterface java.util.stream.Stream stream()\nboolean removeIf(java.util.function.Predicate)\ninterface java.util.stream.Stream parallelStream()\ninterface java.util.Spliterator spliterator()\nvoid forEach(java.util.function.Consumer)\nvoid forEachEntry(java.util.function.ObjIntConsumer)\n|ForwardingMultiset\n}"];
2 [shape=record,label="{Concept_Collections_3|interface com.google.common.collect.SortedMultiset descendingMultiset()\ninterface java.util.SortedSet elementSet()\ninterface java.util.NavigableSet elementSet()\ninterface com.google.common.collect.Multiset$Entry lastEntry()\ninterface com.google.common.collect.Multiset$Entry pollLastEntry()\ninterface java.util.Comparator comparator()\ninterface com.google.common.collect.SortedMultiset tailMultiset(java.lang.Object, com.google.common.collect.BoundType)\ninterface com.google.common.collect.SortedMultiset headMultiset(java.lang.Object, com.google.common.collect.BoundType)\ninterface com.google.common.collect.Multiset$Entry pollFirstEntry()\ninterface com.google.common.collect.Multiset$Entry firstEntry()\ninterface com.google.common.collect.SortedMultiset subMultiset(java.lang.Object, com.google.common.collect.BoundType, java.lang.Object, com.google.common.collect.BoundType)\n|ForwardingSortedMultiset\nSortedMultiset\n}"];
3 [shape=record,label="{Concept_Collections_0||}"];
4 [shape=record,label="{Concept_Collections_2|class com.google.common.collect.HashMultiset create(int)\nclass com.google.common.collect.HashMultiset create(java.lang.Iterable)\nclass com.google.common.collect.HashMultiset create()\n|HashMultiset\n}"];
5 [shape=record,label="{Concept_Collections_1|class com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator, java.lang.Iterable)\nclass com.google.common.collect.ImmutableSortedMultiset copyOf([Ljava.lang.Comparable;)\nclass com.google.common.collect.ImmutableSortedMultiset copyOf(java.lang.Iterable)\nclass com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Comparator, java.util.Iterator)\nclass com.google.common.collect.ImmutableSortedMultiset copyOf(java.util.Iterator)\nclass com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable)\nclass com.google.common.collect.ImmutableSortedMultiset of()\nclass com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable)\nclass com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable)\nclass com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable)\nclass com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable, java.lang.Comparable)\nclass com.google.common.collect.ImmutableSortedMultiset of(java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, java.lang.Comparable, [Ljava.lang.Comparable;)\nclass com.google.common.collect.ImmutableSortedMultiset$Builder naturalOrder()\nclass com.google.common.collect.ImmutableSortedMultiset$Builder reverseOrder()\ninterface java.util.stream.Collector toImmutableSortedMultiset(java.util.Comparator, java.util.function.Function, java.util.function.ToIntFunction)\ninterface java.util.stream.Collector toImmutableSortedMultiset(java.util.Comparator)\nclass com.google.common.collect.ImmutableSortedMultiset descendingMultiset()\nclass com.google.common.collect.ImmutableSet elementSet()\nclass com.google.common.collect.ImmutableSortedSet elementSet()\nclass com.google.common.collect.ImmutableSortedMultiset tailMultiset(java.lang.Object, com.google.common.collect.BoundType)\nclass com.google.common.collect.ImmutableSortedMultiset headMultiset(java.lang.Object, com.google.common.collect.BoundType)\nclass com.google.common.collect.ImmutableSortedMultiset subMultiset(java.lang.Object, com.google.common.collect.BoundType, java.lang.Object, com.google.common.collect.BoundType)\nclass com.google.common.collect.ImmutableSortedMultiset$Builder orderedBy(java.util.Comparator)\nclass com.google.common.collect.ImmutableSortedMultiset copyOfSorted(com.google.common.collect.SortedMultiset)\nclass com.google.common.collect.ImmutableSortedMultiset copyOf([Ljava.lang.Object;)\nclass com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object, java.lang.Object)\nclass com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)\nclass com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)\nclass com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, [Ljava.lang.Object;)\nclass com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object, java.lang.Object, java.lang.Object)\nclass com.google.common.collect.ImmutableSortedMultiset of(java.lang.Object)\ninterface java.util.stream.Collector toImmutableMultiset(java.util.function.Function, java.util.function.ToIntFunction)\ninterface java.util.stream.Collector toImmutableMultiset()\nclass com.google.common.collect.ImmutableSortedMultiset$Builder builder()\nclass com.google.common.collect.ImmutableMultiset copyOf([Ljava.lang.Object;)\nclass com.google.common.collect.ImmutableMultiset copyOf(java.lang.Iterable)\nclass com.google.common.collect.ImmutableMultiset copyOf(java.util.Iterator)\nclass com.google.common.collect.UnmodifiableIterator iterator()\nclass com.google.common.collect.ImmutableSet entrySet()\nclass com.google.common.collect.ImmutableList asList()\nclass com.google.common.collect.ImmutableMultiset of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)\nclass com.google.common.collect.ImmutableMultiset of()\nclass com.google.common.collect.ImmutableMultiset of(java.lang.Object)\nclass com.google.common.collect.ImmutableMultiset of(java.lang.Object, java.lang.Object, java.lang.Object)\nclass com.google.common.collect.ImmutableMultiset of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, [Ljava.lang.Object;)\nclass com.google.common.collect.ImmutableMultiset of(java.lang.Object, java.lang.Object)\nclass com.google.common.collect.ImmutableMultiset of(java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object, java.lang.Object)\nclass com.google.common.collect.ImmutableMultiset$Builder builder()\n|ImmutableSortedMultiset\n}"];
	2 -> 1
	4 -> 1
	5 -> 2
	3 -> 4
	3 -> 5
}
}