digraph G { 
	rankdir=BT;
subgraph Collections { 
label="Collections";
1 [shape=record,label="{Concept_Collections_10||ForwardingSortedMultiset\nConcurrentHashMultiset\nEnumMultiset\nForwardingMultiset\nForwardingSortedMultiset\nHashMultiset\nImmutableMultiset\nImmutableSortedMultiset\nLinkedHashMultiset\nTreeMultiset\nForwardingSortedMultiset\n}"];
2 [shape=record,label="{Concept_Collections_9|boolean add(Object)\nint add(Object, int)\nint remove(Object, int)\nboolean remove(Object)\nint count(Object)\nvoid clear()\nboolean contains(Object)\nboolean isEmpty()\ninterface java.util.Iterator iterator()\nint size()\nclass [Ljava.lang.Object; toArray()\nclass [Ljava.lang.Object; toArray(Object[])\nboolean addAll(Collection)\ninterface java.util.Set entrySet()\nboolean removeAll(Collection)\nboolean retainAll(Collection)\nint setCount(Object, int)\nboolean setCount(Object, int, int)\ninterface java.util.Set elementSet()\nboolean containsAll(Collection)\ninterface java.util.stream.Stream stream()\nboolean removeIf(Predicate)\ninterface java.util.stream.Stream parallelStream()\ninterface java.util.Spliterator spliterator()\nvoid forEach(Consumer)\nvoid forEachEntry(ObjIntConsumer)\n|ForwardingMultiset\n}"];
3 [shape=record,label="{Concept_Collections_6|class com.google.common.collect.ConcurrentHashMultiset create(ConcurrentMap)\nclass com.google.common.collect.ConcurrentHashMultiset create()\nclass com.google.common.collect.ConcurrentHashMultiset create(Iterable)\nboolean removeExactly(Object, int)\ninterface java.util.Set createEntrySet()\n|ConcurrentHashMultiset\n}"];
4 [shape=record,label="{Concept_Collections_0||}"];
5 [shape=record,label="{Concept_Collections_5|class com.google.common.collect.EnumMultiset create(Iterable)\nclass com.google.common.collect.EnumMultiset create(Iterable, Class)\nclass com.google.common.collect.EnumMultiset create(Class)\n|EnumMultiset\n}"];
6 [shape=record,label="{Concept_Collections_8|interface com.google.common.collect.Multiset$Entry firstEntry()\ninterface com.google.common.collect.Multiset$Entry lastEntry()\ninterface com.google.common.collect.Multiset$Entry pollFirstEntry()\ninterface java.util.Comparator comparator()\ninterface java.util.SortedSet elementSet()\ninterface java.util.NavigableSet elementSet()\ninterface com.google.common.collect.SortedMultiset descendingMultiset()\ninterface com.google.common.collect.SortedMultiset headMultiset(Object, BoundType)\ninterface com.google.common.collect.SortedMultiset subMultiset(Object, BoundType, Object, BoundType)\ninterface com.google.common.collect.SortedMultiset tailMultiset(Object, BoundType)\ninterface com.google.common.collect.Multiset$Entry pollLastEntry()\n|ForwardingSortedMultiset\nSortedMultiset\n}"];
7 [shape=record,label="{Concept_Collections_4|class com.google.common.collect.HashMultiset create(int)\nclass com.google.common.collect.HashMultiset create(Iterable)\nclass com.google.common.collect.HashMultiset create()\n|HashMultiset\n}"];
8 [shape=record,label="{Concept_Collections_3|class com.google.common.collect.ImmutableSortedMultiset copyOf(Iterator)\nclass com.google.common.collect.ImmutableSortedMultiset copyOf(Iterable)\nclass com.google.common.collect.ImmutableSortedMultiset copyOf(Comparable[])\nclass com.google.common.collect.ImmutableSortedMultiset copyOf(Comparator, Iterator)\nclass com.google.common.collect.ImmutableSortedMultiset copyOf(Comparator, Iterable)\nclass com.google.common.collect.ImmutableSortedMultiset of(Comparable, Comparable, Comparable, Comparable, Comparable)\nclass com.google.common.collect.ImmutableSortedMultiset of(Comparable, Comparable, Comparable, Comparable, Comparable, Comparable, Comparable[])\nclass com.google.common.collect.ImmutableSortedMultiset of()\nclass com.google.common.collect.ImmutableSortedMultiset of(Comparable)\nclass com.google.common.collect.ImmutableSortedMultiset of(Comparable, Comparable)\nclass com.google.common.collect.ImmutableSortedMultiset of(Comparable, Comparable, Comparable)\nclass com.google.common.collect.ImmutableSortedMultiset of(Comparable, Comparable, Comparable, Comparable)\nclass com.google.common.collect.ImmutableSortedMultiset$Builder naturalOrder()\nclass com.google.common.collect.ImmutableSortedMultiset$Builder reverseOrder()\nclass com.google.common.collect.ImmutableSortedSet elementSet()\nclass com.google.common.collect.ImmutableSortedMultiset descendingMultiset()\nclass com.google.common.collect.ImmutableSortedMultiset headMultiset(Object, BoundType)\nclass com.google.common.collect.ImmutableSortedMultiset subMultiset(Object, BoundType, Object, BoundType)\nclass com.google.common.collect.ImmutableSortedMultiset tailMultiset(Object, BoundType)\nclass com.google.common.collect.ImmutableSortedMultiset$Builder orderedBy(Comparator)\nclass com.google.common.collect.ImmutableSortedMultiset copyOfSorted(SortedMultiset)\ninterface java.util.stream.Collector toImmutableSortedMultiset(Comparator, Function, ToIntFunction)\ninterface java.util.stream.Collector toImmutableSortedMultiset(Comparator)\nclass com.google.common.collect.ImmutableSortedMultiset copyOf(Object[])\nclass com.google.common.collect.ImmutableSortedMultiset of(Object, Object)\nclass com.google.common.collect.ImmutableSortedMultiset of(Object, Object, Object, Object)\nclass com.google.common.collect.ImmutableSortedMultiset of(Object, Object, Object, Object, Object)\nclass com.google.common.collect.ImmutableSortedMultiset of(Object, Object, Object, Object, Object, Object, Object[])\nclass com.google.common.collect.ImmutableSortedMultiset of(Object, Object, Object)\nclass com.google.common.collect.ImmutableSortedMultiset of(Object)\nclass com.google.common.collect.ImmutableSortedMultiset$Builder builder()\n|ImmutableSortedMultiset\n}"];
9 [shape=record,label="{Concept_Collections_7|class com.google.common.collect.ImmutableMultiset copyOf(Iterator)\nclass com.google.common.collect.ImmutableMultiset copyOf(Iterable)\nclass com.google.common.collect.ImmutableMultiset copyOf(Object[])\nclass com.google.common.collect.UnmodifiableIterator iterator()\nclass com.google.common.collect.ImmutableSet entrySet()\nclass com.google.common.collect.ImmutableList asList()\nclass com.google.common.collect.ImmutableMultiset of(Object)\nclass com.google.common.collect.ImmutableMultiset of(Object, Object)\nclass com.google.common.collect.ImmutableMultiset of()\nclass com.google.common.collect.ImmutableMultiset of(Object, Object, Object, Object, Object, Object, Object[])\nclass com.google.common.collect.ImmutableMultiset of(Object, Object, Object, Object)\nclass com.google.common.collect.ImmutableMultiset of(Object, Object, Object, Object, Object)\nclass com.google.common.collect.ImmutableMultiset of(Object, Object, Object)\nclass com.google.common.collect.ImmutableSet elementSet()\nclass com.google.common.collect.ImmutableMultiset$Builder builder()\ninterface java.util.stream.Collector toImmutableMultiset(Function, ToIntFunction)\ninterface java.util.stream.Collector toImmutableMultiset()\n|ImmutableMultiset\n}"];
10 [shape=record,label="{Concept_Collections_2|class com.google.common.collect.LinkedHashMultiset create(int)\nclass com.google.common.collect.LinkedHashMultiset create(Iterable)\nclass com.google.common.collect.LinkedHashMultiset create()\n|LinkedHashMultiset\n}"];
11 [shape=record,label="{Concept_Collections_1|class com.google.common.collect.TreeMultiset create(Comparator)\nclass com.google.common.collect.TreeMultiset create()\nclass com.google.common.collect.TreeMultiset create(Iterable)\n|TreeMultiset\n}"];
	2 -> 1
	5 -> 2
	6 -> 2
	7 -> 2
	9 -> 2
	10 -> 2
	3 -> 2
	4 -> 3
	4 -> 5
	8 -> 6
	11 -> 6
	4 -> 7
	4 -> 8
	8 -> 9
	4 -> 10
	4 -> 11
}
}