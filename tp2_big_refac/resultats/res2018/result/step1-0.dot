digraph G { 
	rankdir=BT;
	margin=0;
	node [margin="0.03,0.03",fontname="DejaVu Sans"];
	ranksep=0.3;
	nodesep=0.2;
//graph[label="name:Collections,concept number:11,object number:21,attribute number:102"
11 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_10</td></tr><tr><td><br/></td></tr><tr><td>ForwardingSortedMultiset<br/>ConcurrentHashMultiset<br/>EnumMultiset<br/>ForwardingMultiset<br/>ForwardingSortedMultiset<br/>HashMultiset<br/>ImmutableMultiset<br/>ImmutableSortedMultiset<br/>LinkedHashMultiset<br/>TreeMultiset<br/>ForwardingSortedMultiset<br/></td></tr></table>>];
12 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_9</td></tr><tr><td>boolean add(Object)<br/>int add(Object, int)<br/>int remove(Object, int)<br/>boolean remove(Object)<br/>int count(Object)<br/>void clear()<br/>boolean contains(Object)<br/>boolean isEmpty()<br/>interface java.util.Iterator iterator()<br/>int size()<br/>class [Ljava.lang.Object; toArray()<br/>class [Ljava.lang.Object; toArray(Object[])<br/>boolean addAll(Collection)<br/>interface java.util.Set entrySet()<br/>boolean removeAll(Collection)<br/>boolean retainAll(Collection)<br/>int setCount(Object, int)<br/>boolean setCount(Object, int, int)<br/>interface java.util.Set elementSet()<br/>boolean containsAll(Collection)<br/>interface java.util.stream.Stream stream()<br/>boolean removeIf(Predicate)<br/>interface java.util.stream.Stream parallelStream()<br/>interface java.util.Spliterator spliterator()<br/>void forEach(Consumer)<br/>void forEachEntry(ObjIntConsumer)<br/></td></tr><tr><td>ForwardingMultiset<br/></td></tr></table>>];
13 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_6</td></tr><tr><td>class com.google.common.collect.ConcurrentHashMultiset create(ConcurrentMap)<br/>class com.google.common.collect.ConcurrentHashMultiset create()<br/>class com.google.common.collect.ConcurrentHashMultiset create(Iterable)<br/>boolean removeExactly(Object, int)<br/>interface java.util.Set createEntrySet()<br/></td></tr><tr><td>ConcurrentHashMultiset<br/></td></tr></table>>];
14 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_0</td></tr><tr><td><br/></td></tr><tr><td><br/></td></tr></table>>];
15 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_5</td></tr><tr><td>class com.google.common.collect.EnumMultiset create(Iterable)<br/>class com.google.common.collect.EnumMultiset create(Iterable, Class)<br/>class com.google.common.collect.EnumMultiset create(Class)<br/></td></tr><tr><td>EnumMultiset<br/></td></tr></table>>];
16 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_8</td></tr><tr><td>interface com.google.common.collect.Multiset$Entry firstEntry()<br/>interface com.google.common.collect.Multiset$Entry lastEntry()<br/>interface com.google.common.collect.Multiset$Entry pollFirstEntry()<br/>interface java.util.Comparator comparator()<br/>interface java.util.SortedSet elementSet()<br/>interface java.util.NavigableSet elementSet()<br/>interface com.google.common.collect.SortedMultiset descendingMultiset()<br/>interface com.google.common.collect.SortedMultiset headMultiset(Object, BoundType)<br/>interface com.google.common.collect.SortedMultiset subMultiset(Object, BoundType, Object, BoundType)<br/>interface com.google.common.collect.SortedMultiset tailMultiset(Object, BoundType)<br/>interface com.google.common.collect.Multiset$Entry pollLastEntry()<br/></td></tr><tr><td>ForwardingSortedMultiset<br/>SortedMultiset<br/></td></tr></table>>];
17 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_4</td></tr><tr><td>class com.google.common.collect.HashMultiset create(int)<br/>class com.google.common.collect.HashMultiset create(Iterable)<br/>class com.google.common.collect.HashMultiset create()<br/></td></tr><tr><td>HashMultiset<br/></td></tr></table>>];
18 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_3</td></tr><tr><td>class com.google.common.collect.ImmutableSortedMultiset copyOf(Iterator)<br/>class com.google.common.collect.ImmutableSortedMultiset copyOf(Iterable)<br/>class com.google.common.collect.ImmutableSortedMultiset copyOf(Comparable[])<br/>class com.google.common.collect.ImmutableSortedMultiset copyOf(Comparator, Iterator)<br/>class com.google.common.collect.ImmutableSortedMultiset copyOf(Comparator, Iterable)<br/>class com.google.common.collect.ImmutableSortedMultiset of(Comparable, Comparable, Comparable, Comparable, Comparable)<br/>class com.google.common.collect.ImmutableSortedMultiset of(Comparable, Comparable, Comparable, Comparable, Comparable, Comparable, Comparable[])<br/>class com.google.common.collect.ImmutableSortedMultiset of()<br/>class com.google.common.collect.ImmutableSortedMultiset of(Comparable)<br/>class com.google.common.collect.ImmutableSortedMultiset of(Comparable, Comparable)<br/>class com.google.common.collect.ImmutableSortedMultiset of(Comparable, Comparable, Comparable)<br/>class com.google.common.collect.ImmutableSortedMultiset of(Comparable, Comparable, Comparable, Comparable)<br/>class com.google.common.collect.ImmutableSortedMultiset$Builder naturalOrder()<br/>class com.google.common.collect.ImmutableSortedMultiset$Builder reverseOrder()<br/>class com.google.common.collect.ImmutableSortedSet elementSet()<br/>class com.google.common.collect.ImmutableSortedMultiset descendingMultiset()<br/>class com.google.common.collect.ImmutableSortedMultiset headMultiset(Object, BoundType)<br/>class com.google.common.collect.ImmutableSortedMultiset subMultiset(Object, BoundType, Object, BoundType)<br/>class com.google.common.collect.ImmutableSortedMultiset tailMultiset(Object, BoundType)<br/>class com.google.common.collect.ImmutableSortedMultiset$Builder orderedBy(Comparator)<br/>class com.google.common.collect.ImmutableSortedMultiset copyOfSorted(SortedMultiset)<br/>interface java.util.stream.Collector toImmutableSortedMultiset(Comparator, Function, ToIntFunction)<br/>interface java.util.stream.Collector toImmutableSortedMultiset(Comparator)<br/>class com.google.common.collect.ImmutableSortedMultiset copyOf(Object[])<br/>class com.google.common.collect.ImmutableSortedMultiset of(Object, Object)<br/>class com.google.common.collect.ImmutableSortedMultiset of(Object, Object, Object, Object)<br/>class com.google.common.collect.ImmutableSortedMultiset of(Object, Object, Object, Object, Object)<br/>class com.google.common.collect.ImmutableSortedMultiset of(Object, Object, Object, Object, Object, Object, Object[])<br/>class com.google.common.collect.ImmutableSortedMultiset of(Object, Object, Object)<br/>class com.google.common.collect.ImmutableSortedMultiset of(Object)<br/>class com.google.common.collect.ImmutableSortedMultiset$Builder builder()<br/></td></tr><tr><td>ImmutableSortedMultiset<br/></td></tr></table>>];
19 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_7</td></tr><tr><td>class com.google.common.collect.ImmutableMultiset copyOf(Iterator)<br/>class com.google.common.collect.ImmutableMultiset copyOf(Iterable)<br/>class com.google.common.collect.ImmutableMultiset copyOf(Object[])<br/>class com.google.common.collect.UnmodifiableIterator iterator()<br/>class com.google.common.collect.ImmutableSet entrySet()<br/>class com.google.common.collect.ImmutableList asList()<br/>class com.google.common.collect.ImmutableMultiset of(Object)<br/>class com.google.common.collect.ImmutableMultiset of(Object, Object)<br/>class com.google.common.collect.ImmutableMultiset of()<br/>class com.google.common.collect.ImmutableMultiset of(Object, Object, Object, Object, Object, Object, Object[])<br/>class com.google.common.collect.ImmutableMultiset of(Object, Object, Object, Object)<br/>class com.google.common.collect.ImmutableMultiset of(Object, Object, Object, Object, Object)<br/>class com.google.common.collect.ImmutableMultiset of(Object, Object, Object)<br/>class com.google.common.collect.ImmutableSet elementSet()<br/>class com.google.common.collect.ImmutableMultiset$Builder builder()<br/>interface java.util.stream.Collector toImmutableMultiset(Function, ToIntFunction)<br/>interface java.util.stream.Collector toImmutableMultiset()<br/></td></tr><tr><td>ImmutableMultiset<br/></td></tr></table>>];
20 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_2</td></tr><tr><td>class com.google.common.collect.LinkedHashMultiset create(int)<br/>class com.google.common.collect.LinkedHashMultiset create(Iterable)<br/>class com.google.common.collect.LinkedHashMultiset create()<br/></td></tr><tr><td>LinkedHashMultiset<br/></td></tr></table>>];
21 [shape=none,label=<<table border="0" cellborder="1" cellspacing="0" port="p"><tr><td>Concept_Collections_1</td></tr><tr><td>class com.google.common.collect.TreeMultiset create(Comparator)<br/>class com.google.common.collect.TreeMultiset create()<br/>class com.google.common.collect.TreeMultiset create(Iterable)<br/></td></tr><tr><td>TreeMultiset<br/></td></tr></table>>];
	12:p -> 11:p
	15:p -> 12:p
	16:p -> 12:p
	17:p -> 12:p
	19:p -> 12:p
	20:p -> 12:p
	13:p -> 12:p
	14:p -> 13:p
	14:p -> 15:p
	18:p -> 16:p
	21:p -> 16:p
	14:p -> 17:p
	14:p -> 18:p
	18:p -> 19:p
	14:p -> 20:p
	14:p -> 21:p
}